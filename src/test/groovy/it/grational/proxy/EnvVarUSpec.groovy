package it.grational.proxy

import spock.lang.*
import it.grational.specification.Environment

/**
 * This Spock specification was auto generated by 'gigawatt'
 * @author d7392
 * @date 01-08-2018 12.55
 */
class EnvVarUSpec extends Specification {

	@Unroll
	def "Should correctly return the environemnt variable associated with the label #envVar"() {
		setup:
			new Environment (
				all_proxy:   'https://proxy-all.pgol.net:1010',
				ftp_proxy:   'socks4://proxy-ftp.pgol.net:2020',
				http_proxy:  'http://proxy-http.pgol.net:3030',
				https_proxy: 'socks5://proxy-https.pgol.net:4040',
				rsync_proxy: 'https://proxy-rsync.pgol.net:5050'
			).insert()
		expect:
			envVar.value() == expectedProxy
		where:
			envVar       || expectedProxy
			EnvVar.ALL   || 'https://proxy-all.pgol.net:1010'
			EnvVar.FTP   || 'socks4://proxy-ftp.pgol.net:2020'
			EnvVar.HTTP  || 'http://proxy-http.pgol.net:3030'
			EnvVar.HTTPS || 'socks5://proxy-https.pgol.net:4040'
			EnvVar.RSYNC || 'https://proxy-rsync.pgol.net:5050'
	}

	@Unroll
	def "Should correctly return the EnvVar enum given a certain URL #url"() {
		expect:
			EnvVar.byURL(url.toURL()) == expectVar
		where:
			url                         || expectVar
			'ftp://proxies.domain.it'   || EnvVar.FTP
			'http://proxies.domain.it'  || EnvVar.HTTP
			'https://proxies.domain.it' || EnvVar.HTTPS

	}

	def "Should raise an exception when an unsupported URL is passed"() {
		when:
			EnvVar.byURL('mailto:user@sub.domain.it'.toURL())
		then:
			def exception = thrown(Exception)
			exception.message == "[EnvVar] Protocol 'mailto' is not supported!"
	}

}
